# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:07:22+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class GoogleChromeManagementV1AndroidAppPermission(BaseModel):
    type: Optional[str] = Field(
        None, description='Output only. The type of the permission.'
    )


class Type(Enum):
    APP_ITEM_TYPE_UNSPECIFIED = 'APP_ITEM_TYPE_UNSPECIFIED'
    CHROME = 'CHROME'
    ANDROID = 'ANDROID'
    WEB = 'WEB'


class GoogleChromeManagementV1AudioStatusReport(BaseModel):
    inputDevice: Optional[str] = Field(
        None, description="Output only. Active input device's name."
    )
    inputGain: Optional[int] = Field(
        None, description="Output only. Active input device's gain in [0, 100]."
    )
    inputMute: Optional[bool] = Field(
        None, description='Output only. Is active input device mute or not.'
    )
    outputDevice: Optional[str] = Field(
        None, description="Output only. Active output device's name."
    )
    outputMute: Optional[bool] = Field(
        None, description='Output only. Is active output device mute or not.'
    )
    outputVolume: Optional[int] = Field(
        None, description="Output only. Active output device's volume in [0, 100]."
    )
    reportTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp of when the sample was collected on device.',
    )


class GoogleChromeManagementV1BatterySampleReport(BaseModel):
    chargeRate: Optional[int] = Field(
        None, description='Output only. Battery charge percentage.'
    )
    current: Optional[str] = Field(
        None, description='Output only. Battery current (mA).'
    )
    dischargeRate: Optional[int] = Field(
        None,
        description="Output only. The battery discharge rate measured in mW. Positive if the battery is being discharged, negative if it's being charged.",
    )
    remainingCapacity: Optional[str] = Field(
        None, description='Output only. Battery remaining capacity (mAmpere-hours).'
    )
    reportTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp of when the sample was collected on device',
    )
    status: Optional[str] = Field(
        None,
        description='Output only. Battery status read from sysfs. Example: Discharging',
    )
    temperature: Optional[int] = Field(
        None, description='Output only. Temperature in Celsius degrees.'
    )
    voltage: Optional[str] = Field(
        None, description='Output only. Battery voltage (millivolt).'
    )


class BatteryHealth(Enum):
    BATTERY_HEALTH_UNSPECIFIED = 'BATTERY_HEALTH_UNSPECIFIED'
    BATTERY_HEALTH_NORMAL = 'BATTERY_HEALTH_NORMAL'
    BATTERY_REPLACE_SOON = 'BATTERY_REPLACE_SOON'
    BATTERY_REPLACE_NOW = 'BATTERY_REPLACE_NOW'


class GoogleChromeManagementV1BatteryStatusReport(BaseModel):
    batteryHealth: Optional[BatteryHealth] = Field(
        None, description='Output only. Battery health.'
    )
    cycleCount: Optional[int] = Field(None, description='Output only. Cycle count.')
    fullChargeCapacity: Optional[str] = Field(
        None, description='Output only. Full charge capacity (mAmpere-hours).'
    )
    reportTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp of when the sample was collected on device',
    )
    sample: Optional[List[GoogleChromeManagementV1BatterySampleReport]] = Field(
        None,
        description='Output only. Sampling data for the battery sorted in a decreasing order of report_time.',
    )
    serialNumber: Optional[str] = Field(
        None, description='Output only. Battery serial number.'
    )


class ShutdownReason(Enum):
    SHUTDOWN_REASON_UNSPECIFIED = 'SHUTDOWN_REASON_UNSPECIFIED'
    USER_REQUEST = 'USER_REQUEST'
    SYSTEM_UPDATE = 'SYSTEM_UPDATE'
    LOW_BATTERY = 'LOW_BATTERY'
    OTHER = 'OTHER'


class GoogleChromeManagementV1BootPerformanceReport(BaseModel):
    bootUpDuration: Optional[str] = Field(None, description='Total time to boot up.')
    bootUpTime: Optional[str] = Field(
        None, description='The timestamp when power came on.'
    )
    reportTime: Optional[str] = Field(
        None, description='Timestamp when the report was collected.'
    )
    shutdownDuration: Optional[str] = Field(
        None, description='Total time since shutdown start to power off.'
    )
    shutdownReason: Optional[ShutdownReason] = Field(
        None, description='The shutdown reason.'
    )
    shutdownTime: Optional[str] = Field(
        None, description='The timestamp when shutdown.'
    )


class Channel(Enum):
    RELEASE_CHANNEL_UNSPECIFIED = 'RELEASE_CHANNEL_UNSPECIFIED'
    CANARY = 'CANARY'
    DEV = 'DEV'
    BETA = 'BETA'
    STABLE = 'STABLE'


class System(Enum):
    DEVICE_SYSTEM_UNSPECIFIED = 'DEVICE_SYSTEM_UNSPECIFIED'
    SYSTEM_OTHER = 'SYSTEM_OTHER'
    SYSTEM_ANDROID = 'SYSTEM_ANDROID'
    SYSTEM_IOS = 'SYSTEM_IOS'
    SYSTEM_CROS = 'SYSTEM_CROS'
    SYSTEM_WINDOWS = 'SYSTEM_WINDOWS'
    SYSTEM_MAC = 'SYSTEM_MAC'
    SYSTEM_LINUX = 'SYSTEM_LINUX'


class GoogleChromeManagementV1BrowserVersion(BaseModel):
    channel: Optional[Channel] = Field(
        None, description='Output only. The release channel of the installed browser.'
    )
    count: Optional[str] = Field(
        None,
        description='Output only. Count grouped by device_system and major version',
    )
    deviceOsVersion: Optional[str] = Field(
        None,
        description='Output only. Version of the system-specified operating system.',
    )
    system: Optional[System] = Field(
        None, description='Output only. The device operating system.'
    )
    version: Optional[str] = Field(
        None, description='Output only. The full version of the installed browser.'
    )


class Type1(Enum):
    ITEM_TYPE_UNSPECIFIED = 'ITEM_TYPE_UNSPECIFIED'
    EXTENSION = 'EXTENSION'
    OTHERS = 'OTHERS'


class GoogleChromeManagementV1ChromeAppPermission(BaseModel):
    accessUserData: Optional[bool] = Field(
        None,
        description='Output only. If available, whether this permissions grants the app/extension access to user data.',
    )
    documentationUri: Optional[str] = Field(
        None,
        description='Output only. If available, a URI to a page that has documentation for the current permission.',
    )
    type: Optional[str] = Field(
        None, description='Output only. The type of the permission.'
    )


class GoogleChromeManagementV1ChromeAppRequest(BaseModel):
    appDetails: Optional[str] = Field(
        None,
        description='Output only. Format: app_details=customers/{customer_id}/apps/chrome/{app_id}',
    )
    appId: Optional[str] = Field(
        None,
        description='Output only. Unique store identifier for the app. Example: "gmbmikajjgmnabiglmofipeabaddhgne" for the Save to Google Drive Chrome extension.',
    )
    detailUri: Optional[str] = Field(
        None, description='Output only. The uri for the detail page of the item.'
    )
    displayName: Optional[str] = Field(
        None, description="Output only. App's display name."
    )
    iconUri: Optional[str] = Field(
        None,
        description='Output only. A link to an image that can be used as an icon for the product.',
    )
    latestRequestTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp of the most recently made request for this app.',
    )
    requestCount: Optional[str] = Field(
        None, description='Output only. Total count of requests for this app.'
    )


class GoogleChromeManagementV1ChromeAppSiteAccess(BaseModel):
    hostMatch: Optional[str] = Field(
        None,
        description='Output only. This can contain very specific hosts, or patterns like "*.com" for instance.',
    )


class GoogleChromeManagementV1CountChromeAppRequestsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Token to specify the next page in the list.'
    )
    requestedApps: Optional[List[GoogleChromeManagementV1ChromeAppRequest]] = Field(
        None, description='Count of requested apps matching request.'
    )
    totalSize: Optional[int] = Field(
        None, description='Total number of matching app requests.'
    )


class GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse(BaseModel):
    noRecentActivityCount: Optional[str] = Field(
        None, description='Number of browsers that havenâ€™t had any recent activity'
    )
    pendingBrowserUpdateCount: Optional[str] = Field(
        None, description='Number of browsers that are pending an OS update'
    )
    recentlyEnrolledCount: Optional[str] = Field(
        None, description='Number of browsers that have been recently enrolled'
    )


class GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse(BaseModel):
    noRecentPolicySyncCount: Optional[str] = Field(
        None,
        description='Number of ChromeOS devices have not synced policies in the past 28 days.',
    )
    noRecentUserActivityCount: Optional[str] = Field(
        None,
        description='Number of ChromeOS devices that have not seen any user activity in the past 28 days.',
    )
    osVersionNotCompliantCount: Optional[str] = Field(
        None, description='Number of devices whose OS version is not compliant.'
    )
    pendingUpdate: Optional[str] = Field(
        None, description='Number of devices that are pending an OS update.'
    )
    unsupportedPolicyCount: Optional[str] = Field(
        None,
        description='Number of devices that are unable to apply a policy due to an OS version mismatch.',
    )


class GoogleChromeManagementV1CountChromeVersionsResponse(BaseModel):
    browserVersions: Optional[List[GoogleChromeManagementV1BrowserVersion]] = Field(
        None, description='List of all browser versions and their install counts.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token to specify the next page of the request.'
    )
    totalSize: Optional[int] = Field(
        None, description='Total number browser versions matching request.'
    )


class Architecture(Enum):
    ARCHITECTURE_UNSPECIFIED = 'ARCHITECTURE_UNSPECIFIED'
    X64 = 'X64'


class GoogleChromeManagementV1CpuInfo(BaseModel):
    architecture: Optional[Architecture] = Field(
        None,
        description='Output only. Architecture type for the CPU. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A',
    )
    keylockerConfigured: Optional[bool] = Field(
        None,
        description='Output only. Whether keylocker is configured.`TRUE` = Enabled; `FALSE` = disabled. Only reported if keylockerSupported = `TRUE`.',
    )
    keylockerSupported: Optional[bool] = Field(
        None, description='Output only. Whether keylocker is supported.'
    )
    maxClockSpeed: Optional[int] = Field(
        None, description='Output only. The max CPU clock speed in kHz.'
    )
    model: Optional[str] = Field(
        None,
        description='Output only. The CPU model name. Example: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz',
    )


class GoogleChromeManagementV1CpuTemperatureInfo(BaseModel):
    label: Optional[str] = Field(
        None, description='Output only. CPU label. Example: Core 0'
    )
    temperatureCelsius: Optional[int] = Field(
        None, description='Output only. CPU temperature in Celsius.'
    )


class GoogleChromeManagementV1Device(BaseModel):
    deviceId: Optional[str] = Field(
        None,
        description='Output only. The ID of the device that reported this Chrome browser information.',
    )
    machine: Optional[str] = Field(
        None,
        description='Output only. The name of the machine within its local network.',
    )


class AueMonth(Enum):
    MONTH_UNSPECIFIED = 'MONTH_UNSPECIFIED'
    JANUARY = 'JANUARY'
    FEBRUARY = 'FEBRUARY'
    MARCH = 'MARCH'
    APRIL = 'APRIL'
    MAY = 'MAY'
    JUNE = 'JUNE'
    JULY = 'JULY'
    AUGUST = 'AUGUST'
    SEPTEMBER = 'SEPTEMBER'
    OCTOBER = 'OCTOBER'
    NOVEMBER = 'NOVEMBER'
    DECEMBER = 'DECEMBER'


class GoogleChromeManagementV1DeviceAueCountReport(BaseModel):
    aueMonth: Optional[AueMonth] = Field(
        None,
        description='Enum value of month corresponding to the auto update expiration date in UTC time zone. If the device is already expired, this field is empty.',
    )
    aueYear: Optional[str] = Field(
        None,
        description='Int value of year corresponding to the Auto Update Expiration date in UTC time zone. If the device is already expired, this field is empty.',
    )
    count: Optional[str] = Field(None, description='Count of devices of this model.')
    expired: Optional[bool] = Field(
        None,
        description='Boolean value for whether or not the device has already expired.',
    )
    model: Optional[str] = Field(None, description='Public model name of the devices.')


class GoogleChromeManagementV1DeviceHardwareCountReport(BaseModel):
    bucket: Optional[str] = Field(
        None, description='Public name of the hardware specification.'
    )
    count: Optional[str] = Field(
        None, description='Count of devices with a unique hardware specification.'
    )


class GoogleChromeManagementV1DiskInfo(BaseModel):
    bytesReadThisSession: Optional[str] = Field(
        None, description='Output only. Number of bytes read since last boot.'
    )
    bytesWrittenThisSession: Optional[str] = Field(
        None, description='Output only. Number of bytes written since last boot.'
    )
    discardTimeThisSession: Optional[str] = Field(
        None,
        description='Output only. Time spent discarding since last boot. Discarding is writing to clear blocks which are no longer in use. Supported on kernels 4.18+.',
    )
    health: Optional[str] = Field(None, description='Output only. Disk health.')
    ioTimeThisSession: Optional[str] = Field(
        None,
        description='Output only. Counts the time the disk and queue were busy, so unlike the fields above, parallel requests are not counted multiple times.',
    )
    manufacturer: Optional[str] = Field(
        None, description='Output only. Disk manufacturer.'
    )
    model: Optional[str] = Field(None, description='Output only. Disk model.')
    readTimeThisSession: Optional[str] = Field(
        None, description='Output only. Time spent reading from disk since last boot.'
    )
    serialNumber: Optional[str] = Field(
        None, description='Output only. Disk serial number.'
    )
    sizeBytes: Optional[str] = Field(None, description='Output only. Disk size.')
    type: Optional[str] = Field(
        None, description='Output only. Disk type: eMMC / NVMe / ATA / SCSI.'
    )
    volumeIds: Optional[List[str]] = Field(
        None, description='Output only. Disk volumes.'
    )
    writeTimeThisSession: Optional[str] = Field(
        None, description='Output only. Time spent writing to disk since last boot.'
    )


class GoogleChromeManagementV1DisplayDevice(BaseModel):
    displayHeightMm: Optional[int] = Field(
        None, description='Output only. Display height in millimeters.'
    )
    displayName: Optional[str] = Field(
        None, description='Output only. Display device name.'
    )
    displayWidthMm: Optional[int] = Field(
        None, description='Output only. Display width in millimeters.'
    )
    internal: Optional[bool] = Field(
        None, description='Output only. Is display internal or not.'
    )
    manufactureYear: Optional[int] = Field(
        None, description='Output only. Year of manufacture.'
    )
    manufacturerId: Optional[str] = Field(
        None, description='Output only. Three letter manufacturer ID.'
    )
    modelId: Optional[int] = Field(
        None, description='Output only. Manufacturer product code.'
    )


class GoogleChromeManagementV1DisplayInfo(BaseModel):
    deviceId: Optional[str] = Field(
        None, description='Output only. Represents the graphics card device id.'
    )
    displayName: Optional[str] = Field(
        None, description='Output only. Display device name.'
    )
    isInternal: Optional[bool] = Field(
        None, description='Output only. Indicates if display is internal or not.'
    )
    refreshRate: Optional[int] = Field(
        None, description='Output only. Refresh rate in Hz.'
    )
    resolutionHeight: Optional[int] = Field(
        None, description='Output only. Resolution height in pixels.'
    )
    resolutionWidth: Optional[int] = Field(
        None, description='Output only. Resolution width in pixels.'
    )


class GoogleChromeManagementV1FindInstalledAppDevicesResponse(BaseModel):
    devices: Optional[List[GoogleChromeManagementV1Device]] = Field(
        None,
        description='A list of devices which have the app installed. Sorted in ascending alphabetical order on the Device.machine field.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token to specify the next page of the request.'
    )
    totalSize: Optional[int] = Field(
        None, description='Total number of devices matching request.'
    )


class GoogleChromeManagementV1GraphicsAdapterInfo(BaseModel):
    adapter: Optional[str] = Field(
        None,
        description='Output only. Adapter name. Example: Mesa DRI Intel(R) UHD Graphics 620 (Kabylake GT2).',
    )
    deviceId: Optional[str] = Field(
        None, description='Output only. Represents the graphics card device id.'
    )
    driverVersion: Optional[str] = Field(
        None, description='Output only. Version of the GPU driver.'
    )


class GoogleChromeManagementV1GraphicsStatusReport(BaseModel):
    displays: Optional[List[GoogleChromeManagementV1DisplayInfo]] = Field(
        None, description='Output only. Information about the displays for the device.'
    )
    reportTime: Optional[str] = Field(
        None, description='Output only. Time at which the graphics data was reported.'
    )


class Problem(Enum):
    HTTPS_LATENCY_PROBLEM_UNSPECIFIED = 'HTTPS_LATENCY_PROBLEM_UNSPECIFIED'
    FAILED_DNS_RESOLUTIONS = 'FAILED_DNS_RESOLUTIONS'
    FAILED_HTTPS_REQUESTS = 'FAILED_HTTPS_REQUESTS'
    HIGH_LATENCY = 'HIGH_LATENCY'
    VERY_HIGH_LATENCY = 'VERY_HIGH_LATENCY'


class GoogleChromeManagementV1HttpsLatencyRoutineData(BaseModel):
    latency: Optional[str] = Field(
        None,
        description='Output only. HTTPS latency if routine succeeded or failed because of HIGH_LATENCY or VERY_HIGH_LATENCY.',
    )
    problem: Optional[Problem] = Field(
        None,
        description='Output only. HTTPS latency routine problem if a problem occurred.',
    )


class AppInstallType(Enum):
    APP_INSTALL_TYPE_UNSPECIFIED = 'APP_INSTALL_TYPE_UNSPECIFIED'
    MULTIPLE = 'MULTIPLE'
    NORMAL = 'NORMAL'
    ADMIN = 'ADMIN'
    DEVELOPMENT = 'DEVELOPMENT'
    SIDELOAD = 'SIDELOAD'
    OTHER = 'OTHER'


class AppSource(Enum):
    APP_SOURCE_UNSPECIFIED = 'APP_SOURCE_UNSPECIFIED'
    CHROME_WEBSTORE = 'CHROME_WEBSTORE'
    PLAY_STORE = 'PLAY_STORE'


class AppType(Enum):
    APP_TYPE_UNSPECIFIED = 'APP_TYPE_UNSPECIFIED'
    EXTENSION = 'EXTENSION'
    APP = 'APP'
    THEME = 'THEME'
    HOSTED_APP = 'HOSTED_APP'
    ANDROID_APP = 'ANDROID_APP'


class GoogleChromeManagementV1InstalledApp(BaseModel):
    appId: Optional[str] = Field(
        None,
        description='Output only. Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote).',
    )
    appInstallType: Optional[AppInstallType] = Field(
        None, description='Output only. How the app was installed.'
    )
    appSource: Optional[AppSource] = Field(
        None, description='Output only. Source of the installed app.'
    )
    appType: Optional[AppType] = Field(
        None, description='Output only. Type of the app.'
    )
    browserDeviceCount: Optional[str] = Field(
        None,
        description='Output only. Count of browser devices with this app installed.',
    )
    description: Optional[str] = Field(
        None, description='Output only. Description of the installed app.'
    )
    disabled: Optional[bool] = Field(
        None, description='Output only. Whether the app is disabled.'
    )
    displayName: Optional[str] = Field(
        None, description='Output only. Name of the installed app.'
    )
    homepageUri: Optional[str] = Field(
        None, description='Output only. Homepage uri of the installed app.'
    )
    osUserCount: Optional[str] = Field(
        None,
        description='Output only. Count of ChromeOS users with this app installed.',
    )
    permissions: Optional[List[str]] = Field(
        None, description='Output only. Permissions of the installed app.'
    )


class GoogleChromeManagementV1MemoryStatusReport(BaseModel):
    pageFaults: Optional[int] = Field(
        None, description='Output only. Number of page faults during this collection'
    )
    reportTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp in milliseconds representing time at which this report was sampled.',
    )
    sampleFrequency: Optional[str] = Field(
        None, description='Output only. Frequency the report is sampled.'
    )
    systemRamFreeBytes: Optional[str] = Field(
        None,
        description='Output only. Amount of free RAM in bytes (unreliable due to Garbage Collection).',
    )


class Type2(Enum):
    NETWORK_DEVICE_TYPE_UNSPECIFIED = 'NETWORK_DEVICE_TYPE_UNSPECIFIED'
    CELLULAR_DEVICE = 'CELLULAR_DEVICE'
    ETHERNET_DEVICE = 'ETHERNET_DEVICE'
    WIFI_DEVICE = 'WIFI_DEVICE'


class GoogleChromeManagementV1NetworkDevice(BaseModel):
    iccid: Optional[str] = Field(
        None,
        description="Output only. The integrated circuit card ID associated with the device's sim card.",
    )
    imei: Optional[str] = Field(
        None,
        description='Output only. IMEI (if applicable) of the corresponding network device.',
    )
    macAddress: Optional[str] = Field(
        None,
        description='Output only. MAC address (if applicable) of the corresponding network device.',
    )
    mdn: Optional[str] = Field(
        None,
        description="Output only. The mobile directory number associated with the device's sim card.",
    )
    meid: Optional[str] = Field(
        None,
        description='Output only. MEID (if applicable) of the corresponding network device.',
    )
    type: Optional[Type2] = Field(None, description='Output only. Network device type.')


class GoogleChromeManagementV1NetworkDiagnosticsReport(BaseModel):
    httpsLatencyData: Optional[GoogleChromeManagementV1HttpsLatencyRoutineData] = Field(
        None, description='Output only. HTTPS latency test data.'
    )
    reportTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp of when the diagnostics were collected.',
    )


class GoogleChromeManagementV1NetworkInfo(BaseModel):
    networkDevices: Optional[List[GoogleChromeManagementV1NetworkDevice]] = Field(
        None, description='Output only. List of network devices.'
    )


class ConnectionState(Enum):
    NETWORK_CONNECTION_STATE_UNSPECIFIED = 'NETWORK_CONNECTION_STATE_UNSPECIFIED'
    ONLINE = 'ONLINE'
    CONNECTED = 'CONNECTED'
    PORTAL = 'PORTAL'
    CONNECTING = 'CONNECTING'
    NOT_CONNECTED = 'NOT_CONNECTED'


class ConnectionType(Enum):
    NETWORK_TYPE_UNSPECIFIED = 'NETWORK_TYPE_UNSPECIFIED'
    CELLULAR = 'CELLULAR'
    ETHERNET = 'ETHERNET'
    TETHER = 'TETHER'
    VPN = 'VPN'
    WIFI = 'WIFI'


class GoogleChromeManagementV1NetworkStatusReport(BaseModel):
    connectionState: Optional[ConnectionState] = Field(
        None, description='Output only. Current connection state of the network.'
    )
    connectionType: Optional[ConnectionType] = Field(
        None, description='Output only. Network connection type.'
    )
    encryptionOn: Optional[bool] = Field(
        None, description='Output only. Whether the wifi encryption key is turned off.'
    )
    gatewayIpAddress: Optional[str] = Field(
        None, description='Output only. Gateway IP address.'
    )
    guid: Optional[str] = Field(
        None, description='Output only. Network connection guid.'
    )
    lanIpAddress: Optional[str] = Field(
        None, description='Output only. LAN IP address.'
    )
    receivingBitRateMbps: Optional[str] = Field(
        None,
        description='Output only. Receiving bit rate measured in Megabits per second.',
    )
    reportTime: Optional[str] = Field(
        None, description='Output only. Time at which the network state was reported.'
    )
    sampleFrequency: Optional[str] = Field(
        None, description='Output only. Frequency the report is sampled.'
    )
    signalStrengthDbm: Optional[int] = Field(
        None,
        description='Output only. Signal strength for wireless networks measured in decibels.',
    )
    transmissionBitRateMbps: Optional[str] = Field(
        None,
        description='Output only. Transmission bit rate measured in Megabits per second.',
    )
    transmissionPowerDbm: Optional[int] = Field(
        None, description='Output only. Transmission power measured in decibels.'
    )
    wifiLinkQuality: Optional[str] = Field(
        None,
        description='Output only. Wifi link quality. Value ranges from [0, 70]. 0 indicates no signal and 70 indicates a strong signal.',
    )
    wifiPowerManagementEnabled: Optional[bool] = Field(
        None, description='Output only. Wifi power management enabled'
    )


class UpdateState(Enum):
    UPDATE_STATE_UNSPECIFIED = 'UPDATE_STATE_UNSPECIFIED'
    OS_IMAGE_DOWNLOAD_NOT_STARTED = 'OS_IMAGE_DOWNLOAD_NOT_STARTED'
    OS_IMAGE_DOWNLOAD_IN_PROGRESS = 'OS_IMAGE_DOWNLOAD_IN_PROGRESS'
    OS_UPDATE_NEED_REBOOT = 'OS_UPDATE_NEED_REBOOT'


class GoogleChromeManagementV1OsUpdateStatus(BaseModel):
    lastRebootTime: Optional[str] = Field(
        None, description='Output only. Timestamp of the last reboot.'
    )
    lastUpdateCheckTime: Optional[str] = Field(
        None, description='Output only. Timestamp of the last update check.'
    )
    lastUpdateTime: Optional[str] = Field(
        None, description='Output only. Timestamp of the last successful update.'
    )
    newPlatformVersion: Optional[str] = Field(
        None,
        description='Output only. New platform version of the os image being downloaded and applied. It is only set when update status is OS_IMAGE_DOWNLOAD_IN_PROGRESS or OS_UPDATE_NEED_REBOOT. Note this could be a dummy "0.0.0.0" for OS_UPDATE_NEED_REBOOT status for some edge cases, e.g. update engine is restarted without a reboot.',
    )
    newRequestedPlatformVersion: Optional[str] = Field(
        None,
        description='Output only. New requested platform version from the pending updated kiosk app.',
    )
    updateState: Optional[UpdateState] = Field(
        None, description='Output only. Current state of the os update.'
    )


class GoogleChromeManagementV1StorageInfoDiskVolume(BaseModel):
    storageFreeBytes: Optional[str] = Field(
        None, description='Free storage space in bytes.'
    )
    storageTotalBytes: Optional[str] = Field(
        None, description='Total storage space in bytes.'
    )
    volumeId: Optional[str] = Field(None, description='Disk volume id.')


class GoogleChromeManagementV1StorageStatusReport(BaseModel):
    disk: Optional[List[GoogleChromeManagementV1DiskInfo]] = Field(
        None, description='Output only. Reports on disk.'
    )
    reportTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp of when the sample was collected on device',
    )


class GoogleChromeManagementV1TelemetryAudioSevereUnderrunEvent(BaseModel):
    pass


class GoogleChromeManagementV1TelemetryDeviceInfo(BaseModel):
    deviceId: Optional[str] = Field(
        None,
        description="Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab.",
    )
    orgUnitId: Optional[str] = Field(
        None, description='Output only. Organization unit ID of the device.'
    )


class EventType(Enum):
    EVENT_TYPE_UNSPECIFIED = 'EVENT_TYPE_UNSPECIFIED'
    AUDIO_SEVERE_UNDERRUN = 'AUDIO_SEVERE_UNDERRUN'
    USB_ADDED = 'USB_ADDED'
    USB_REMOVED = 'USB_REMOVED'
    NETWORK_HTTPS_LATENCY_CHANGE = 'NETWORK_HTTPS_LATENCY_CHANGE'


class HttpsLatencyState(Enum):
    HTTPS_LATENCY_STATE_UNSPECIFIED = 'HTTPS_LATENCY_STATE_UNSPECIFIED'
    RECOVERY = 'RECOVERY'
    PROBLEM = 'PROBLEM'


class GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent(BaseModel):
    httpsLatencyRoutineData: Optional[
        GoogleChromeManagementV1HttpsLatencyRoutineData
    ] = Field(None, description='HTTPS latency routine data that triggered the event.')
    httpsLatencyState: Optional[HttpsLatencyState] = Field(
        None, description='Current HTTPS latency state.'
    )


class GoogleChromeManagementV1TelemetryUserInfo(BaseModel):
    email: Optional[str] = Field(None, description="Output only. User's email.")
    orgUnitId: Optional[str] = Field(
        None, description='Output only. Organization unit ID of the user.'
    )


class SecurityLevel(Enum):
    THUNDERBOLT_SECURITY_LEVEL_UNSPECIFIED = 'THUNDERBOLT_SECURITY_LEVEL_UNSPECIFIED'
    THUNDERBOLT_SECURITY_NONE_LEVEL = 'THUNDERBOLT_SECURITY_NONE_LEVEL'
    THUNDERBOLT_SECURITY_USER_LEVEL = 'THUNDERBOLT_SECURITY_USER_LEVEL'
    THUNDERBOLT_SECURITY_SECURE_LEVEL = 'THUNDERBOLT_SECURITY_SECURE_LEVEL'
    THUNDERBOLT_SECURITY_DP_ONLY_LEVEL = 'THUNDERBOLT_SECURITY_DP_ONLY_LEVEL'
    THUNDERBOLT_SECURITY_USB_ONLY_LEVEL = 'THUNDERBOLT_SECURITY_USB_ONLY_LEVEL'
    THUNDERBOLT_SECURITY_NO_PCIE_LEVEL = 'THUNDERBOLT_SECURITY_NO_PCIE_LEVEL'


class GoogleChromeManagementV1ThunderboltInfo(BaseModel):
    securityLevel: Optional[SecurityLevel] = Field(
        None, description='Security level of the Thunderbolt bus.'
    )


class EncryptionAlgorithm(Enum):
    MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED = 'MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED'
    MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN = 'MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN'
    MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128 = 'MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128'
    MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256 = 'MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256'


class EncryptionState(Enum):
    MEMORY_ENCRYPTION_STATE_UNSPECIFIED = 'MEMORY_ENCRYPTION_STATE_UNSPECIFIED'
    MEMORY_ENCRYPTION_STATE_UNKNOWN = 'MEMORY_ENCRYPTION_STATE_UNKNOWN'
    MEMORY_ENCRYPTION_STATE_DISABLED = 'MEMORY_ENCRYPTION_STATE_DISABLED'
    MEMORY_ENCRYPTION_STATE_TME = 'MEMORY_ENCRYPTION_STATE_TME'
    MEMORY_ENCRYPTION_STATE_MKTME = 'MEMORY_ENCRYPTION_STATE_MKTME'


class GoogleChromeManagementV1TotalMemoryEncryptionInfo(BaseModel):
    encryptionAlgorithm: Optional[EncryptionAlgorithm] = Field(
        None, description='Memory encryption algorithm.'
    )
    encryptionState: Optional[EncryptionState] = Field(
        None, description='The state of memory encryption on the device.'
    )
    keyLength: Optional[str] = Field(
        None, description='The length of the encryption keys.'
    )
    maxKeys: Optional[str] = Field(
        None, description='The maximum number of keys that can be used for encryption.'
    )


class GoogleChromeManagementV1TouchScreenDevice(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Output only. Touch screen device display name.'
    )
    stylusCapable: Optional[bool] = Field(
        None, description='Output only. Touch screen device is stylus capable or not.'
    )
    touchPointCount: Optional[int] = Field(
        None, description='Output only. Number of touch points supported on the device.'
    )


class GoogleChromeManagementV1TouchScreenInfo(BaseModel):
    devices: Optional[List[GoogleChromeManagementV1TouchScreenDevice]] = Field(
        None, description='Output only. List of the internal touch screen devices.'
    )
    touchpadLibrary: Optional[str] = Field(
        None, description='Output only. Touchpad library name used by the input stack.'
    )


class GoogleChromeManagementV1UsbPeripheralReport(BaseModel):
    categories: Optional[List[str]] = Field(
        None,
        description='Output only. Categories the device belongs to https://www.usb.org/defined-class-codes',
    )
    classId: Optional[int] = Field(
        None,
        description='Output only. Class ID https://www.usb.org/defined-class-codes',
    )
    firmwareVersion: Optional[str] = Field(
        None, description='Output only. Firmware version'
    )
    name: Optional[str] = Field(
        None, description='Output only. Device name, model name, or product name'
    )
    pid: Optional[int] = Field(None, description='Output only. Product ID')
    subclassId: Optional[int] = Field(
        None,
        description='Output only. Subclass ID https://www.usb.org/defined-class-codes',
    )
    vendor: Optional[str] = Field(None, description='Output only. Vendor name')
    vid: Optional[int] = Field(None, description='Output only. Vendor ID')


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class GoogleTypeDate(BaseModel):
    day: Optional[int] = Field(
        None,
        description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
    )
    month: Optional[int] = Field(
        None,
        description='Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.',
    )
    year: Optional[int] = Field(
        None,
        description='Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GoogleChromeManagementV1AndroidAppInfo(BaseModel):
    permissions: Optional[List[GoogleChromeManagementV1AndroidAppPermission]] = Field(
        None, description='Output only. Permissions requested by an Android app.'
    )


class GoogleChromeManagementV1BatteryInfo(BaseModel):
    designCapacity: Optional[str] = Field(
        None, description='Output only. Design capacity (mAmpere-hours).'
    )
    designMinVoltage: Optional[int] = Field(
        None, description='Output only. Designed minimum output voltage (mV)'
    )
    manufactureDate: Optional[GoogleTypeDate] = Field(
        None, description='Output only. The date the battery was manufactured.'
    )
    manufacturer: Optional[str] = Field(
        None, description='Output only. Battery manufacturer.'
    )
    serialNumber: Optional[str] = Field(
        None, description='Output only. Battery serial number.'
    )
    technology: Optional[str] = Field(
        None, description='Output only. Technology of the battery. Example: Li-ion'
    )


class GoogleChromeManagementV1ChromeAppInfo(BaseModel):
    googleOwned: Optional[bool] = Field(
        None,
        description='Output only. Whether the app or extension is built and maintained by Google. Version-specific field that will only be set when the requested app version is found.',
    )
    isCwsHosted: Optional[bool] = Field(
        None,
        description='Output only. Whether the app or extension is in a published state in the Chrome Web Store.',
    )
    isExtensionPolicySupported: Optional[bool] = Field(
        None, description='Output only. Whether an app supports policy for extensions.'
    )
    isKioskOnly: Optional[bool] = Field(
        None,
        description='Output only. Whether the app is only for Kiosk mode on ChromeOS devices',
    )
    isTheme: Optional[bool] = Field(
        None, description='Output only. Whether the app or extension is a theme.'
    )
    kioskEnabled: Optional[bool] = Field(
        None,
        description='Output only. Whether this app is enabled for Kiosk mode on ChromeOS devices',
    )
    minUserCount: Optional[int] = Field(
        None, description='Output only. The minimum number of users using this app.'
    )
    permissions: Optional[List[GoogleChromeManagementV1ChromeAppPermission]] = Field(
        None,
        description='Output only. Every custom permission requested by the app. Version-specific field that will only be set when the requested app version is found.',
    )
    siteAccess: Optional[List[GoogleChromeManagementV1ChromeAppSiteAccess]] = Field(
        None,
        description='Output only. Every permission giving access to domains or broad host patterns. ( e.g. www.google.com). This includes the matches from content scripts as well as hosts in the permissions node of the manifest. Version-specific field that will only be set when the requested app version is found.',
    )
    supportEnabled: Optional[bool] = Field(
        None,
        description='Output only. The app developer has enabled support for their app. Version-specific field that will only be set when the requested app version is found.',
    )
    type: Optional[Type1] = Field(
        None, description='Output only. Types of an item in the Chrome Web Store'
    )


class GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse(
    BaseModel
):
    deviceAueCountReports: Optional[
        List[GoogleChromeManagementV1DeviceAueCountReport]
    ] = Field(
        None,
        description='The list of reports sorted by auto update expiration date in ascending order.',
    )


class GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse(BaseModel):
    cpuReports: Optional[List[GoogleChromeManagementV1DeviceHardwareCountReport]] = (
        Field(
            None,
            description='The DeviceHardwareCountReport for device cpu type (for example Intel(R) Core(TM) i7-10610U CPU @ 1.80GHz).',
        )
    )
    memoryReports: Optional[List[GoogleChromeManagementV1DeviceHardwareCountReport]] = (
        Field(
            None,
            description='The DeviceHardwareCountReport for device memory amount in gigabytes (for example 16).',
        )
    )
    modelReports: Optional[List[GoogleChromeManagementV1DeviceHardwareCountReport]] = (
        Field(
            None,
            description='The DeviceHardwareCountReport for device model type (for example Acer C7 Chromebook).',
        )
    )
    storageReports: Optional[
        List[GoogleChromeManagementV1DeviceHardwareCountReport]
    ] = Field(
        None,
        description='The DeviceHardwareCountReport for device storage amount in gigabytes (for example 128).',
    )


class GoogleChromeManagementV1CountInstalledAppsResponse(BaseModel):
    installedApps: Optional[List[GoogleChromeManagementV1InstalledApp]] = Field(
        None, description='List of installed apps matching request.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token to specify the next page of the request.'
    )
    totalSize: Optional[int] = Field(
        None, description='Total number of installed apps matching request.'
    )


class GoogleChromeManagementV1CpuStatusReport(BaseModel):
    cpuTemperatureInfo: Optional[List[GoogleChromeManagementV1CpuTemperatureInfo]] = (
        Field(
            None,
            description='Output only. CPU temperature sample info per CPU core in Celsius',
        )
    )
    cpuUtilizationPct: Optional[int] = Field(
        None, description='Output only. Sample of CPU utilization (0-100 percent).'
    )
    reportTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp in milliseconds representing time at which this report was sampled.',
    )
    sampleFrequency: Optional[str] = Field(
        None, description='Output only. Frequency the report is sampled.'
    )


class GoogleChromeManagementV1GraphicsInfo(BaseModel):
    adapterInfo: Optional[GoogleChromeManagementV1GraphicsAdapterInfo] = Field(
        None, description='Output only. Information about the graphics adapter (GPU).'
    )
    displayDevices: Optional[List[GoogleChromeManagementV1DisplayDevice]] = Field(
        None, description='Output only. Information about the display(s) of the device.'
    )
    eprivacySupported: Optional[bool] = Field(
        None, description='Output only. Is ePrivacy screen supported or not.'
    )
    touchScreenInfo: Optional[GoogleChromeManagementV1TouchScreenInfo] = Field(
        None,
        description='Output only. Information about the internal touch screen(s) of the device.',
    )


class GoogleChromeManagementV1MemoryInfo(BaseModel):
    availableRamBytes: Optional[str] = Field(
        None, description='Output only. Amount of available RAM in bytes.'
    )
    totalMemoryEncryption: Optional[
        GoogleChromeManagementV1TotalMemoryEncryptionInfo
    ] = Field(
        None, description='Output only. Total memory encryption info for the device.'
    )
    totalRamBytes: Optional[str] = Field(
        None, description='Output only. Total RAM in bytes.'
    )


class GoogleChromeManagementV1PeripheralsReport(BaseModel):
    reportTime: Optional[str] = Field(
        None, description='Output only. Timestamp of when the report was collected.'
    )
    usbPeripheralReport: Optional[List[GoogleChromeManagementV1UsbPeripheralReport]] = (
        Field(None, description='Reports of all usb connected devices.')
    )


class GoogleChromeManagementV1StorageInfo(BaseModel):
    availableDiskBytes: Optional[str] = Field(
        None,
        description='The available space for user data storage in the device in bytes.',
    )
    totalDiskBytes: Optional[str] = Field(
        None,
        description='The total space for user data storage in the device in bytes.',
    )
    volume: Optional[List[GoogleChromeManagementV1StorageInfoDiskVolume]] = Field(
        None, description='Information for disk volumes'
    )


class GoogleChromeManagementV1TelemetryDevice(BaseModel):
    audioStatusReport: Optional[List[GoogleChromeManagementV1AudioStatusReport]] = (
        Field(
            None,
            description='Output only. Audio reports collected periodically sorted in a decreasing order of report_time.',
        )
    )
    batteryInfo: Optional[List[GoogleChromeManagementV1BatteryInfo]] = Field(
        None, description='Output only. Information on battery specs for the device.'
    )
    batteryStatusReport: Optional[List[GoogleChromeManagementV1BatteryStatusReport]] = (
        Field(None, description='Output only. Battery reports collected periodically.')
    )
    bootPerformanceReport: Optional[
        List[GoogleChromeManagementV1BootPerformanceReport]
    ] = Field(None, description='Output only. Boot performance reports of the device.')
    cpuInfo: Optional[List[GoogleChromeManagementV1CpuInfo]] = Field(
        None, description='Output only. Information regarding CPU specs for the device.'
    )
    cpuStatusReport: Optional[List[GoogleChromeManagementV1CpuStatusReport]] = Field(
        None,
        description='Output only. CPU status reports collected periodically sorted in a decreasing order of report_time.',
    )
    customer: Optional[str] = Field(
        None,
        description='Output only. Google Workspace Customer whose enterprise enrolled the device.',
    )
    deviceId: Optional[str] = Field(
        None,
        description="Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab",
    )
    graphicsInfo: Optional[GoogleChromeManagementV1GraphicsInfo] = Field(
        None,
        description='Output only. Contains information regarding Graphic peripherals for the device.',
    )
    graphicsStatusReport: Optional[
        List[GoogleChromeManagementV1GraphicsStatusReport]
    ] = Field(None, description='Output only. Graphics reports collected periodically.')
    memoryInfo: Optional[GoogleChromeManagementV1MemoryInfo] = Field(
        None,
        description='Output only. Information regarding memory specs for the device.',
    )
    memoryStatusReport: Optional[List[GoogleChromeManagementV1MemoryStatusReport]] = (
        Field(
            None,
            description='Output only. Memory status reports collected periodically sorted decreasing by report_time.',
        )
    )
    name: Optional[str] = Field(
        None, description='Output only. Resource name of the device.'
    )
    networkDiagnosticsReport: Optional[
        List[GoogleChromeManagementV1NetworkDiagnosticsReport]
    ] = Field(
        None, description='Output only. Network diagnostics collected periodically.'
    )
    networkInfo: Optional[GoogleChromeManagementV1NetworkInfo] = Field(
        None, description='Output only. Network devices information.'
    )
    networkStatusReport: Optional[List[GoogleChromeManagementV1NetworkStatusReport]] = (
        Field(None, description='Output only. Network specs collected periodically.')
    )
    orgUnitId: Optional[str] = Field(
        None, description='Output only. Organization unit ID of the device.'
    )
    osUpdateStatus: Optional[List[GoogleChromeManagementV1OsUpdateStatus]] = Field(
        None,
        description='Output only. Contains relevant information regarding ChromeOS update status.',
    )
    peripheralsReport: Optional[List[GoogleChromeManagementV1PeripheralsReport]] = (
        Field(
            None,
            description='Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time.',
        )
    )
    serialNumber: Optional[str] = Field(
        None,
        description="Output only. Device serial number. This value is the same as the Admin Console's Serial Number in the ChromeOS Devices tab.",
    )
    storageInfo: Optional[GoogleChromeManagementV1StorageInfo] = Field(
        None, description='Output only. Information of storage specs for the device.'
    )
    storageStatusReport: Optional[List[GoogleChromeManagementV1StorageStatusReport]] = (
        Field(None, description='Output only. Storage reports collected periodically.')
    )
    thunderboltInfo: Optional[List[GoogleChromeManagementV1ThunderboltInfo]] = Field(
        None, description='Output only. Information on Thunderbolt bus.'
    )


class GoogleChromeManagementV1TelemetryUsbPeripheralsEvent(BaseModel):
    usbPeripheralReport: Optional[List[GoogleChromeManagementV1UsbPeripheralReport]] = (
        Field(
            None, description='List of usb devices that were either added or removed.'
        )
    )


class GoogleChromeManagementV1TelemetryUserDevice(BaseModel):
    audioStatusReport: Optional[List[GoogleChromeManagementV1AudioStatusReport]] = (
        Field(
            None,
            description='Output only. Audio reports collected periodically sorted in a decreasing order of report_time.',
        )
    )
    deviceId: Optional[str] = Field(
        None,
        description="The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab.",
    )
    peripheralsReport: Optional[List[GoogleChromeManagementV1PeripheralsReport]] = (
        Field(
            None,
            description='Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time.',
        )
    )


class GoogleChromeManagementV1AppDetails(BaseModel):
    androidAppInfo: Optional[GoogleChromeManagementV1AndroidAppInfo] = Field(
        None, description='Output only. Android app information.'
    )
    appId: Optional[str] = Field(
        None,
        description='Output only. Unique store identifier for the item. Examples: "gmbmikajjgmnabiglmofipeabaddhgne" for the Save to Google Drive Chrome extension, "com.google.android.apps.docs" for the Google Drive Android app.',
    )
    chromeAppInfo: Optional[GoogleChromeManagementV1ChromeAppInfo] = Field(
        None, description='Output only. Chrome Web Store app information.'
    )
    description: Optional[str] = Field(
        None, description="Output only. App's description."
    )
    detailUri: Optional[str] = Field(
        None, description='Output only. The uri for the detail page of the item.'
    )
    displayName: Optional[str] = Field(
        None, description="Output only. App's display name."
    )
    firstPublishTime: Optional[str] = Field(
        None, description='Output only. First published time.'
    )
    homepageUri: Optional[str] = Field(
        None, description='Output only. Home page or Website uri.'
    )
    iconUri: Optional[str] = Field(
        None,
        description='Output only. A link to an image that can be used as an icon for the product.',
    )
    isPaidApp: Optional[bool] = Field(
        None,
        description='Output only. Indicates if the app has to be paid for OR has paid content.',
    )
    latestPublishTime: Optional[str] = Field(
        None, description='Output only. Latest published time.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Format: name=customers/{customer_id}/apps/{chrome|android|web}/{app_id}@{version}',
    )
    privacyPolicyUri: Optional[str] = Field(
        None,
        description='Output only. The URI pointing to the privacy policy of the app, if it was provided by the developer. Version-specific field that will only be set when the requested app version is found.',
    )
    publisher: Optional[str] = Field(
        None, description='Output only. The publisher of the item.'
    )
    reviewNumber: Optional[str] = Field(
        None,
        description='Output only. Number of reviews received. Chrome Web Store review information will always be for the latest version of an app.',
    )
    reviewRating: Optional[float] = Field(
        None,
        description='Output only. The rating of the app (on 5 stars). Chrome Web Store review information will always be for the latest version of an app.',
    )
    revisionId: Optional[str] = Field(
        None,
        description='Output only. App version. A new revision is committed whenever a new version of the app is published.',
    )
    serviceError: Optional[GoogleRpcStatus] = Field(
        None,
        description='Output only. Information about a partial service error if applicable.',
    )
    type: Optional[Type] = Field(None, description='Output only. App type.')


class GoogleChromeManagementV1ListTelemetryDevicesResponse(BaseModel):
    devices: Optional[List[GoogleChromeManagementV1TelemetryDevice]] = Field(
        None, description='Telemetry devices returned in the response.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Token to specify next page in the list.'
    )


class GoogleChromeManagementV1TelemetryEvent(BaseModel):
    audioSevereUnderrunEvent: Optional[
        GoogleChromeManagementV1TelemetryAudioSevereUnderrunEvent
    ] = Field(
        None,
        description='Output only. Payload for audio severe underrun event. Present only when the `event_type` field is `AUDIO_SEVERE_UNDERRUN`.',
    )
    device: Optional[GoogleChromeManagementV1TelemetryDeviceInfo] = Field(
        None,
        description='Output only. Information about the device associated with the event.',
    )
    eventType: Optional[EventType] = Field(
        None, description='The event type of the current event.'
    )
    httpsLatencyChangeEvent: Optional[
        GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent
    ] = Field(
        None,
        description='Output only. Payload for HTTPS latency change event. Present only when `event_type` is `NETWORK_HTTPS_LATENCY_CHANGE`.',
    )
    name: Optional[str] = Field(
        None, description='Output only. Resource name of the event.'
    )
    reportTime: Optional[str] = Field(
        None, description='Timestamp that represents when the event was reported.'
    )
    usbPeripheralsEvent: Optional[
        GoogleChromeManagementV1TelemetryUsbPeripheralsEvent
    ] = Field(
        None,
        description='Output only. Payload for usb peripherals event. Present only when the `event_type` field is either `USB_ADDED` or `USB_REMOVED`.',
    )
    user: Optional[GoogleChromeManagementV1TelemetryUserInfo] = Field(
        None,
        description='Output only. Information about the user associated with the event.',
    )


class GoogleChromeManagementV1TelemetryUser(BaseModel):
    customer: Optional[str] = Field(
        None, description='G Suite Customer whose enterprise enrolled the device.'
    )
    name: Optional[str] = Field(None, description='Resource name of the user.')
    orgUnitId: Optional[str] = Field(None, description='Organization unit of the user.')
    userDevice: Optional[List[GoogleChromeManagementV1TelemetryUserDevice]] = Field(
        None, description='Telemetry data collected from a managed user and device.'
    )
    userEmail: Optional[str] = Field(None, description='Email address of the user.')
    userId: Optional[str] = Field(None, description='Directory ID of the user.')


class GoogleChromeManagementV1ListTelemetryEventsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Token to specify next page in the list.'
    )
    telemetryEvents: Optional[List[GoogleChromeManagementV1TelemetryEvent]] = Field(
        None, description='Telemetry events returned in the response.'
    )


class GoogleChromeManagementV1ListTelemetryUsersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Token to specify next page in the list.'
    )
    telemetryUsers: Optional[List[GoogleChromeManagementV1TelemetryUser]] = Field(
        None, description='Telemetry users returned in the response.'
    )
